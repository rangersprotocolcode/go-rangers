1.初始信息
合约原文:
pragma solidity ^0.5.0;
pragma experimental ABIEncoderV2;
import "./R_MutiSign.sol";
import "./IERC20.sol";
import "./IERC202.sol";

contract CoinContract{
    address internal usdt = 0x5C602Ec7B8de713d6106DA7d1dB1FD7BFcC2d4d4;
    
    MutiSign    g_MutiSignContract;
    uint256     g_iNonce;
        
    //events
    //锁定成功事件
    event event_deposite(address user,uint256 amount);
    event event_deposite2(string userid,address user,uint256 amount);
    //withdraw成功事件
    event event_withdraw(string userid,address user,uint256 amount);
    //调用nonce，每次加一
    event event_nonce(uint256 nonce);
    
    event event_dbg(bool msg);
    event event_dbg(string msg);
    event event_dbg(bytes msg);
    event event_dbg(uint256 msg);
    event event_dbg(address msg);
    //////////////////////////////////////////////////////
    
    constructor(address payable addr) public {
        g_iNonce = 0;
        g_MutiSignContract = MutiSign(addr);
    }
    
    //fallback
    function () external payable
    {
        //revert();
    }
    
    function getnonce() public
    {
        emit event_nonce(g_iNonce);
    }
    
    /**
     * @dev 锁定操作
     */
    function Deposite() public payable
    {
        require(msg.value > 0);
        emit event_deposite(msg.sender, msg.value);
    }
    
    /**
     * @dev 锁定操作
     * @param userid 游戏用户id
     */
    function Deposite2(string memory userid) public payable
    {
        require(msg.value > 0);
        emit event_deposite2(userid, msg.sender, msg.value);
    }

    /**
     * @dev 提取操作
     * @param nonce 每次加一
     * @param userids 游戏用户id列表
     * @param addrs 地址列表
     * @param amounts 提现数列表
     * @param signs 现有白名单签名
     */
    function Withdraw(uint256 nonce,string[] memory userids, address payable[] memory addrs,uint256[] memory amounts,bytes[] memory signs) public
    {
        require(g_iNonce+1 == nonce);
        require(userids.length > 0);
        require(addrs.length == userids.length);
        require(amounts.length == userids.length);

        string memory uids ;
        for(uint256 i = 0 ; i < userids.length;i++)
        {
            string memory tmp1;
            tmp1 = strConcat(uids,userids[i]);
            uids = tmp1;
        }
        
        bytes memory str = abi.encodePacked(nonce,uids,addrs,amounts);
        bytes32 hashmsg = keccak256(str);

        if(!CheckWitness(hashmsg,signs)){
            return;
        }
        
        for(uint i = 0; i < userids.length; i++){
            addrs[i].transfer(amounts[i]);
            emit event_withdraw(userids[i],addrs[i],amounts[i]);
        }
        
        g_iNonce++;
        emit event_nonce(g_iNonce);
    }
    
    function WithdrawUsdt(uint256 nonce,string[] memory userids, address payable[] memory addrs,uint256[] memory amounts,bytes[] memory signs) public
    {
        require(g_iNonce+1 == nonce);
        require(userids.length > 0);
        require(addrs.length == userids.length);
        require(amounts.length == userids.length);

        string memory uids ;
        for(uint256 i = 0 ; i < userids.length;i++)
        {
            string memory tmp1;
            tmp1 = strConcat(uids,userids[i]);
            uids = tmp1;
        }
        
        bytes memory str = abi.encodePacked(nonce,uids,addrs,amounts);
        bytes32 hashmsg = keccak256(str);

        if(!CheckWitness(hashmsg,signs)){
            return;
        }
        
        for(uint i = 0; i < userids.length; i++){
            IERC202(usdt).transfer(addrs[i],amounts[i]);
            //addrs[i].transfer(amounts[i]);
            //emit event_withdraw(userids[i],addrs[i],amounts[i]);
        }
        
        g_iNonce++;
        emit event_nonce(g_iNonce);
    }
    
    function WithdrawErc20(uint256 nonce,address erc20addr,string[] memory userids, address payable[] memory addrs,uint256[] memory amounts,bytes[] memory signs) public
    {
        require(g_iNonce+1 == nonce);
        require(userids.length > 0);
        require(addrs.length == userids.length);
        require(amounts.length == userids.length);

        string memory uids ;
        for(uint256 i = 0 ; i < userids.length;i++)
        {
            string memory tmp1;
            tmp1 = strConcat(uids,userids[i]);
            uids = tmp1;
        }
        
        bytes memory str = abi.encodePacked(nonce,uids,addrs,amounts);
        bytes32 hashmsg = keccak256(str);

        if(!CheckWitness(hashmsg,signs)){
            return;
        }
        
        for(uint i = 0; i < userids.length; i++){
            IERC20(erc20addr).transfer(addrs[i],amounts[i]);
            //addrs[i].transfer(amounts[i]);
            //emit event_withdraw(userids[i],addrs[i],amounts[i]);
        }
        
        g_iNonce++;
        emit event_nonce(g_iNonce);
    }
    
    function CheckWitness(bytes32 hashmsg,bytes[] memory signs) private returns(bool)
    {
        address[3] memory whilelist = g_MutiSignContract.getWhiteList();
        emit event_dbg(whilelist[0]);

        //return true;
        
        uint256 iCount = 0;
        address[4] memory adds;
        
        for(uint256 i = 0; i< uint256(signs.length); i++)
        {
            address tmp = decode(hashmsg,signs[i]);
            uint256 find = 0;
            for(uint256 j=0 ; j<i ; j++)
            {
                if(adds[j] == tmp)
                {
                    find = 1;
                    break;
                }
            }
            if(find == 1)
            {
                continue;
            }
            adds[i] = tmp;
            
            if(IsInWhiteList(whilelist,tmp))
            {
                iCount ++;
            }
        }
        if(iCount >= 2)
        {
            return true;
        }
        return false;
        
    }
    
    function IsInWhiteList(address[3] memory WhiteList,address addr) private pure returns(bool)
    {
        for(uint256 i = 0 ; i < 4; i++)
        {
            if(WhiteList[i] == addr)
            {
                return true;
            }
        }
        return false;
    }
    
    function decode(bytes32 hashmsg,bytes memory signedString) private pure returns (address)
    {
        bytes32  r = bytesToBytes32(slice(signedString, 0, 32));
        bytes32  s = bytesToBytes32(slice(signedString, 32, 32));
        byte  v = slice(signedString, 64, 1)[0];
        return ecrecoverDecode(hashmsg,r, s, v);
    }
  
    function slice(bytes memory data, uint start, uint len) private pure returns(bytes memory)
    {
        bytes memory b = new bytes(len);
        for(uint i = 0; i < len; i++){
            b[i] = data[i + start];
        }

        return b;
    }

    //使用ecrecover恢复地址
    function ecrecoverDecode(bytes32 hashmsg,bytes32 r, bytes32 s, byte v1) private pure returns (address  addr){
        uint8 v = uint8(v1);
        if(uint8(v1)== 0 || uint8(v1)==1)
        {
            v = uint8(v1) + 27;
        }
        addr = ecrecover(hashmsg, v, r, s);
    }

    //bytes转换为bytes32
    function bytesToBytes32(bytes memory source) private pure returns (bytes32 result) {
        assembly {
            result := mload(add(source, 32))
        }
    }
    
    function strConcat(string memory _a, string memory _b) internal pure returns (string memory){
        bytes memory _ba = bytes(_a);
        bytes memory _bb = bytes(_b);
        string memory ret = new string(_ba.length + _bb.length);
        bytes memory bret = bytes(ret);
        uint k = 0;
        for (uint i = 0; i < _ba.length; i++)
            bret[k++] = _ba[i];
        for (uint i = 0; i < _bb.length; i++)
            bret[k++] = _bb[i];
        
        return string(ret);
    }
}



GasLimit:3000000
GasPrice:1

2.合约编译后的字节码：
"6080604052735c602ec7b8de713d6106da7d1db1fd7bfcc2d4d46000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503480156200006557600080fd5b5060405162001c9938038062001c9983398181016040526200008b9190810190620000f2565b600060028190555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200016c565b600081519050620000ec8162000152565b92915050565b6000602082840312156200010557600080fd5b60006200011584828501620000db565b91505092915050565b60006200012b8262000132565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200015d816200011e565b81146200016957600080fd5b50565b611b1d806200017c6000396000f3fe6080604052600436106100555760003560e01c8063046b290814610057578063999635a11461006e578063ad88be6e14610097578063b2b57a26146100c0578063da68b4b4146100e9578063eb185c50146100f3575b005b34801561006357600080fd5b5061006c61010f565b005b34801561007a57600080fd5b5061009560048036036100909190810190611327565b61014a565b005b3480156100a357600080fd5b506100be60048036036100b9919081019061123e565b610369565b005b3480156100cc57600080fd5b506100e760048036036100e29190810190611327565b61055c565b005b6100f161074e565b005b61010d600480360361010891908101906111fd565b610796565b005b7f8a75e65e6a8c5a0bc5c906bb7fc1f38cdbdfc0adc92e41b43b3ce83463a8a8c06002546040516101409190611754565b60405180910390a1565b846001600254011461015b57600080fd5b600084511161016957600080fd5b835183511461017757600080fd5b835182511461018557600080fd5b606060008090505b85518110156101c85760606101b5838884815181106101a857fe5b60200260200101516107e1565b905080925050808060010191505061018d565b506060868286866040516020016101e2949392919061160d565b6040516020818303038152906040529050600081805190602001209050610209818561092a565b61021557505050610362565b60008090505b87518110156103125786818151811061023057fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166108fc87838151811061025d57fe5b60200260200101519081150290604051600060405180830381858888f19350505050158015610290573d6000803e3d6000fd5b507fe04d47d3054af1f047151ee17798cebe92f604635034315e4fcab7b2d7a66ef98882815181106102be57fe5b60200260200101518883815181106102d257fe5b60200260200101518884815181106102e657fe5b60200260200101516040516102fd93929190611716565b60405180910390a1808060010191505061021b565b506002600081548092919060010191905055507f8a75e65e6a8c5a0bc5c906bb7fc1f38cdbdfc0adc92e41b43b3ce83463a8a8c06002546040516103569190611754565b60405180910390a15050505b5050505050565b856001600254011461037a57600080fd5b600084511161038857600080fd5b835183511461039657600080fd5b83518251146103a457600080fd5b606060008090505b85518110156103e75760606103d4838884815181106103c757fe5b60200260200101516107e1565b90508092505080806001019150506103ac565b50606087828686604051602001610401949392919061160d565b6040516020818303038152906040529050600081805190602001209050610428818561092a565b61043457505050610554565b60008090505b8751811015610504578873ffffffffffffffffffffffffffffffffffffffff1663a9059cbb88838151811061046b57fe5b602002602001015188848151811061047f57fe5b60200260200101516040518363ffffffff1660e01b81526004016104a492919061166a565b602060405180830381600087803b1580156104be57600080fd5b505af11580156104d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506104f691908101906111d4565b50808060010191505061043a565b506002600081548092919060010191905055507f8a75e65e6a8c5a0bc5c906bb7fc1f38cdbdfc0adc92e41b43b3ce83463a8a8c06002546040516105489190611754565b60405180910390a15050505b505050505050565b846001600254011461056d57600080fd5b600084511161057b57600080fd5b835183511461058957600080fd5b835182511461059757600080fd5b606060008090505b85518110156105da5760606105c7838884815181106105ba57fe5b60200260200101516107e1565b905080925050808060010191505061059f565b506060868286866040516020016105f4949392919061160d565b604051602081830303815290604052905060008180519060200120905061061b818561092a565b61062757505050610747565b60008090505b87518110156106f7576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb88838151811061067f57fe5b602002602001015188848151811061069357fe5b60200260200101516040518363ffffffff1660e01b81526004016106b892919061166a565b600060405180830381600087803b1580156106d257600080fd5b505af11580156106e6573d6000803e3d6000fd5b50505050808060010191505061062d565b506002600081548092919060010191905055507f8a75e65e6a8c5a0bc5c906bb7fc1f38cdbdfc0adc92e41b43b3ce83463a8a8c060025460405161073b9190611754565b60405180910390a15050505b5050505050565b6000341161075b57600080fd5b7fb61b60bb8d6b946262c1546b50b6e216393eb147c9d267ea7d123d9aafd5483a333460405161078c92919061166a565b60405180910390a1565b600034116107a357600080fd5b7f6cf43ed1a9dd396df89c54be8a0dacaf939f1afdc5dc17a37974d01665ad2d478133346040516107d6939291906116d8565b60405180910390a150565b6060808390506060839050606081518351016040519080825280601f01601f1916602001820160405280156108255781602001600182028038833980820191505090505b5090506060819050600080905060008090505b85518110156108a65785818151811061084d57fe5b602001015160f81c60f81b83838060010194508151811061086a57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050610838565b5060008090505b845181101561091b578481815181106108c257fe5b602001015160f81c60f81b8383806001019450815181106108df57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806001019150506108ad565b50829550505050505092915050565b6000610934610da0565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166309a9d76c6040518163ffffffff1660e01b815260040160606040518083038186803b15801561099c57600080fd5b505afa1580156109b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506109d491908101906111ab565b90507fe821288434e942492293d0b381bb8e705c32fa88ff6a7978ea1a399fde4a7e6d81600060038110610a0457fe5b6020020151604051610a16919061164f565b60405180910390a16000809050610a2b610dc2565b60008090505b8551811015610b45576000610a5988888481518110610a4c57fe5b6020026020010151610b68565b9050600080905060008090505b83811015610ac8578273ffffffffffffffffffffffffffffffffffffffff16858260048110610a9157fe5b602002015173ffffffffffffffffffffffffffffffffffffffff161415610abb5760019150610ac8565b8080600101915050610a66565b506001811415610ad9575050610b38565b81848460048110610ae657fe5b602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050610b278683610bd9565b15610b355784806001019550505b50505b8080600101915050610a31565b5060028210610b5a5760019350505050610b62565b600093505050505b92915050565b600080610b80610b7b8460006020610c51565b610d05565b90506000610b98610b9385602080610c51565b610d05565b90506000610ba98560406001610c51565b600081518110610bb557fe5b602001015160f81c60f81b9050610bce86848484610d13565b935050505092915050565b600080600090505b6004811015610c45578273ffffffffffffffffffffffffffffffffffffffff16848260038110610c0d57fe5b602002015173ffffffffffffffffffffffffffffffffffffffff161415610c38576001915050610c4b565b8080600101915050610be1565b50600090505b92915050565b606080826040519080825280601f01601f191660200182016040528015610c875781602001600182028038833980820191505090505b50905060008090505b83811015610cf9578585820181518110610ca657fe5b602001015160f81c60f81b828281518110610cbd57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050610c90565b50809150509392505050565b600060208201519050919050565b6000808260f81c905060008360f81c60ff161480610d37575060018360f81c60ff16145b15610d4657601b8360f81c0190505b60018682878760405160008152602001604052604051610d699493929190611693565b6020604051602081039080840390855afa158015610d8b573d6000803e3d6000fd5b50505060206040510351915050949350505050565b6040518060600160405280600390602082028038833980820191505090505090565b6040518060800160405280600490602082028038833980820191505090505090565b600081359050610df381611a7e565b92915050565b600081519050610e0881611a7e565b92915050565b600081359050610e1d81611a95565b92915050565b600082601f830112610e3457600080fd5b6003610e47610e428261179c565b61176f565b91508183856020840282011115610e5d57600080fd5b60005b83811015610e8d5781610e738882610df9565b845260208401935060208301925050600181019050610e60565b5050505092915050565b600082601f830112610ea857600080fd5b8135610ebb610eb6826117be565b61176f565b91508181835260208401935060208101905083856020840282011115610ee057600080fd5b60005b83811015610f105781610ef68882610e0e565b845260208401935060208301925050600181019050610ee3565b5050505092915050565b600082601f830112610f2b57600080fd5b8135610f3e610f39826117e6565b61176f565b9150818183526020840193506020810190508360005b83811015610f845781358601610f6a888261109a565b845260208401935060208301925050600181019050610f54565b5050505092915050565b600082601f830112610f9f57600080fd5b8135610fb2610fad8261180e565b61176f565b9150818183526020840193506020810190508360005b83811015610ff85781358601610fde88826110ee565b845260208401935060208301925050600181019050610fc8565b5050505092915050565b600082601f83011261101357600080fd5b813561102661102182611836565b61176f565b9150818183526020840193506020810190508385602084028201111561104b57600080fd5b60005b8381101561107b57816110618882611196565b84526020840193506020830192505060018101905061104e565b5050505092915050565b60008151905061109481611aac565b92915050565b600082601f8301126110ab57600080fd5b81356110be6110b98261185e565b61176f565b915080825260208301602083018583830111156110da57600080fd5b6110e5838284611a21565b50505092915050565b600082601f8301126110ff57600080fd5b813561111261110d8261188a565b61176f565b9150808252602083016020830185838301111561112e57600080fd5b611139838284611a21565b50505092915050565b600082601f83011261115357600080fd5b8135611166611161826118b6565b61176f565b9150808252602083016020830185838301111561118257600080fd5b61118d838284611a21565b50505092915050565b6000813590506111a581611ac3565b92915050565b6000606082840312156111bd57600080fd5b60006111cb84828501610e23565b91505092915050565b6000602082840312156111e657600080fd5b60006111f484828501611085565b91505092915050565b60006020828403121561120f57600080fd5b600082013567ffffffffffffffff81111561122957600080fd5b61123584828501611142565b91505092915050565b60008060008060008060c0878903121561125757600080fd5b600061126589828a01611196565b965050602061127689828a01610de4565b955050604087013567ffffffffffffffff81111561129357600080fd5b61129f89828a01610f8e565b945050606087013567ffffffffffffffff8111156112bc57600080fd5b6112c889828a01610e97565b935050608087013567ffffffffffffffff8111156112e557600080fd5b6112f189828a01611002565b92505060a087013567ffffffffffffffff81111561130e57600080fd5b61131a89828a01610f1a565b9150509295509295509295565b600080600080600060a0868803121561133f57600080fd5b600061134d88828901611196565b955050602086013567ffffffffffffffff81111561136a57600080fd5b61137688828901610f8e565b945050604086013567ffffffffffffffff81111561139357600080fd5b61139f88828901610e97565b935050606086013567ffffffffffffffff8111156113bc57600080fd5b6113c888828901611002565b925050608086013567ffffffffffffffff8111156113e557600080fd5b6113f188828901610f1a565b9150509295509295909350565b600061140a838361143d565b60208301905092915050565b600061142283836115d8565b60208301905092915050565b611437816119eb565b82525050565b6114468161198c565b82525050565b6114558161197a565b82525050565b600061146682611902565b6114708185611948565b935061147b836118e2565b8060005b838110156114ac57815161149388826113fe565b975061149e8361192e565b92505060018101905061147f565b5085935050505092915050565b60006114c48261190d565b6114ce8185611953565b93506114d9836118f2565b8060005b8381101561150a5781516114f18882611416565b97506114fc8361193b565b9250506001810190506114dd565b5085935050505092915050565b611520816119aa565b82525050565b600061153182611923565b61153b818561195e565b935061154b818560208601611a30565b61155481611a6d565b840191505092915050565b600061156a82611923565b611574818561196f565b9350611584818560208601611a30565b80840191505092915050565b600061159b82611918565b6115a5818561195e565b93506115b5818560208601611a30565b6115be81611a6d565b840191505092915050565b6115d2816119d4565b82525050565b6115e1816119d4565b82525050565b6115f86115f3826119d4565b611a63565b82525050565b611607816119de565b82525050565b600061161982876115e7565b602082019150611629828661155f565b9150611635828561145b565b915061164182846114b9565b915081905095945050505050565b6000602082019050611664600083018461144c565b92915050565b600060408201905061167f600083018561142e565b61168c60208301846115c9565b9392505050565b60006080820190506116a86000830187611517565b6116b560208301866115fe565b6116c26040830185611517565b6116cf6060830184611517565b95945050505050565b600060608201905081810360008301526116f28186611526565b9050611701602083018561142e565b61170e60408301846115c9565b949350505050565b600060608201905081810360008301526117308186611590565b905061173f602083018561142e565b61174c60408301846115c9565b949350505050565b600060208201905061176960008301846115c9565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561179257600080fd5b8060405250919050565b600067ffffffffffffffff8211156117b357600080fd5b602082029050919050565b600067ffffffffffffffff8211156117d557600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156117fd57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561182557600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561184d57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561187557600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff8211156118a157600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff8211156118cd57600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600081905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000611985826119b4565b9050919050565b6000611997826119b4565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006119f6826119fd565b9050919050565b6000611a0882611a0f565b9050919050565b6000611a1a826119b4565b9050919050565b82818337600083830152505050565b60005b83811015611a4e578082015181840152602081019050611a33565b83811115611a5d576000848401525b50505050565b6000819050919050565b6000601f19601f8301169050919050565b611a878161197a565b8114611a9257600080fd5b50565b611a9e8161198c565b8114611aa957600080fd5b50565b611ab58161199e565b8114611ac057600080fd5b50565b611acc816119d4565b8114611ad757600080fd5b5056fea365627a7a723158207a4a6d7944acd950c4876c6760d5b0fe976a7e962ad8d98f66f589a2afa5eb806c6578706572696d656e74616cf564736f6c63430005110040"

3.创建合约
hash: 0x87d71bcaf388ddd5c2d3c6d6f78dff3f72b5f03e5d84435e373029a6341037b6
参数：0x253D2C464d6c0bF52e7ea5E798B87912d99303bd
abi是：000000000000000000000000253D2C464d6c0bF52e7ea5E798B87912d99303bd(需要拼到合约编译字节码后面)
消耗的Gas:1432548

4.调用合约的输入
调用方法：getnonce
hash: 0x6ef27a9951ca4c5ba93d5d6fdd6e848feca88e66cdf9ddf1d0744a5cae619939
参数：无
abi编码：0x046b2908
返回：无
Contain opcode:[NOT JUMP EQ DUP3 RETURN MSTORE DUP1 MUL OR PUSH3 CODECOPY PUSH2 DUP4 POP SWAP2 SWAP3 SSTORE CALLVALUE ADD DUP2 SWAP1 JUMPDEST DUP5 SLT DUP6 PUSH20 ISZERO MLOAD SUB AND JUMPI CODESIZE PUSH1 EXP SLOAD]

5.调用合约的输入
调用方法：Deposite
hash: 0xfbaed5424019659f43f05f8afec213bba75344eba134580946cb12e6fc44e4e3
参数：无
abi编码：0xda68b4b4，同时转账1个eth
返回：无
log：[
	{
		"from": "0x61e34F69bc8C37787dA27329A2df70fF9d5649ad",
		"topic": "0xb61b60bb8d6b946262c1546b50b6e216393eb147c9d267ea7d123d9aafd5483a",
		"event": "event_deposite",
		"args": {
			"0": "0xB64A5EcE9Bc1E48d9FB895301a1BA1Abc30Abda5",
			"1": "1000000000000000000",
			"user": "0xB64A5EcE9Bc1E48d9FB895301a1BA1Abc30Abda5",
			"amount": "1000000000000000000"
		}
	}
]
消耗的GAS:1891
Contain opcode:[SUB PUSH4 JUMPDEST SWAP3 DUP4 DUP2 CALLDATASIZE SHR DUP1 EQ AND SWAP1 DUP6 PUSH20 DUP5 SWAP4 PUSH2 SWAP2 LOG1 STOP CALLDATALOAD JUMP GT PUSH32 CALLER LT PUSH1 MSTORE CALLVALUE ADD JUMPI MLOAD DUP3 POP]

5.调用合约的输入
调用方法：Deposite2
hash: 0x298403653e37a29f85d7bb677c63c9f1eec7656dbe732ecc312f9788b8675f51
参数：1个--字符串abcde
abi编码：0xeb185c50000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000056162636465000000000000000000000000000000000000000000000000000000，同时转账2个eth
返回：无
log：[
	{
		"from": "0x61e34F69bc8C37787dA27329A2df70fF9d5649ad",
		"topic": "0x6cf43ed1a9dd396df89c54be8a0dacaf939f1afdc5dc17a37974d01665ad2d47",
		"event": "event_deposite2",
		"args": {
			"0": "abcde",
			"1": "0xB64A5EcE9Bc1E48d9FB895301a1BA1Abc30Abda5",
			"2": "2000000000000000000",
			"userid": "abcde",
			"user": "0xB64A5EcE9Bc1E48d9FB895301a1BA1Abc30Abda5",
			"amount": "2000000000000000000"
		}
	}
]
消耗的GAs:3733
Contain opcode:[MLOAD CALLER DUP7 CALLDATASIZE SWAP1 GT NOT STOP DUP1 POP CALLDATACOPY PUSH20 MSTORE PUSH4 DUP5 SWAP4 ADD JUMP DUP6 SWAP2 DUP4 SWAP5 ISZERO AND PUSH32 PUSH1 SHR JUMPDEST DUP3 SLT SWAP3 LT JUMPI EQ DUP2 OR CALLVALUE LOG1 PUSH2 CALLDATALOAD SUB PUSH8]
