package vm

import (
	"com.tuntun.rocket/node/src/common"
	"com.tuntun.rocket/node/src/middleware/log"
	"com.tuntun.rocket/node/src/vm/crypto"
	"fmt"
	"github.com/holiman/uint256"
	"math/big"
	"testing"
)

func TestVM0(t *testing.T) {
	mockInit()
	config := new(testConfig)
	setDefaults(config)
	defer log.Close()

	config.GasLimit = 3000000
	config.GasPrice = big.NewInt(0)

	contractCodeBytes := common.Hex2Bytes("60806040526000805534801561001457600080fd5b5060ca806100236000396000f3fe6080604052348015600f57600080fd5b506004361060325760003560e01c80632beaa90f14603757806387db03b7146053575b600080fd5b603d607e565b6040518082815260200191505060405180910390f35b607c60048036036020811015606757600080fd5b81019080803590602001909291905050506087565b005b60008054905090565b80600054016000819055505056fea265627a7a72315820dd06e5c6466fd6226b1d4db2bfa83033ef4a09278a8cd2f8efde275770f29e8a64736f6c63430005110032")
	createResult, contractAddress, createLeftGas, createErr := mockCreate(contractCodeBytes, config)
	fmt.Printf("New create contract address:%s\n", contractAddress.GetHexString())
	fmt.Printf("New create contract createResult:%v\n", createResult)
	fmt.Printf("New create contract createLeftGas:%v,createErr:%v\n", createLeftGas, createErr)

	//invoke add
	input := common.Hex2Bytes("87db03b70000000000000000000000000000000000000000000000000000000000000003")
	callResult, callLeftGas, callErr := mockCall(contractAddress, input, config)
	fmt.Printf("callResult:%v,callLeftGas:%v,callErr:%v\n", callResult, callLeftGas, callErr)

	//invoke get
	input = common.Hex2Bytes("2beaa90f")
	callResult, callLeftGas, callErr = mockCall(contractAddress, input, config)
	fmt.Printf("callResult:%v,callLeftGas:%v,callErr:%v\n", callResult, callLeftGas, callErr)
	//stateDB := config.State
}

func TestVM1(t *testing.T) {
	mockInit()
	config := new(testConfig)
	setDefaults(config)
	defer log.Close()

	config.GasLimit = 3000000
	config.GasPrice = big.NewInt(1)

	contractCodeBytes := common.Hex2Bytes("60806040526000805534801561001457600080fd5b50610283806100246000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80630d56562c1461005c5780632beaa90f146100a05780635b3357d2146100be5780636271f50e146100dc578063d4b6f21c14610128575b600080fd5b61009e6004803603602081101561007257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610146565b005b6100a861018a565b6040518082815260200191505060405180910390f35b6100c6610193565b6040518082815260200191505060405180910390f35b610126600480360360808110156100f257600080fd5b81019080803590602001909291908035906020019092919080359060200190929190803590602001909291905050506101d4565b005b61013061020d565b6040518082815260200191505060405180910390f35b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008054905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1631905090565b836000540160008190555082600054036000819055508160005402600081905550806000548161020057fe5b0560008190555050505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163190509056fea265627a7a72315820d99c4e269ce7a3842ef1d4ed91588b73c5883a822de11215136baf18c0761dcc64736f6c63430005110032")
	createResult, contractAddress, createLeftGas, createErr := mockCreate(contractCodeBytes, config)
	fmt.Printf("New create contract address:%s\n", contractAddress.GetHexString())
	fmt.Printf("New create contract createResult:%v,%d\n", createResult, len(createResult))
	fmt.Printf("New create contract costGas:%v,createErr:%v\n", config.GasLimit-createLeftGas, createErr)

	input := common.Hex2Bytes("6271f50e000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000002")
	callResult, callLeftGas, callErr := mockCall(contractAddress, input, config)
	fmt.Printf("callResult:%v,costGas:%d,callErr:%v\n", callResult, config.GasLimit-callLeftGas, callErr)
}

func TestVM2(t *testing.T) {
	mockInit()
	config := new(testConfig)
	setDefaults(config)
	defer log.Close()

	config.GasLimit = 3000000
	config.GasPrice = big.NewInt(1)

	contractCodeBytes := common.Hex2Bytes("60806040526000805534801561001457600080fd5b50610283806100246000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c80630d56562c1461005c5780632beaa90f146100a05780635b3357d2146100be5780636271f50e146100dc578063d4b6f21c14610128575b600080fd5b61009e6004803603602081101561007257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610146565b005b6100a861018a565b6040518082815260200191505060405180910390f35b6100c6610193565b6040518082815260200191505060405180910390f35b610126600480360360808110156100f257600080fd5b81019080803590602001909291908035906020019092919080359060200190929190803590602001909291905050506101d4565b005b61013061020d565b6040518082815260200191505060405180910390f35b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008054905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1631905090565b836000540160008190555082600054036000819055508160005402600081905550806000548161020057fe5b0560008190555050505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163190509056fea265627a7a72315820d99c4e269ce7a3842ef1d4ed91588b73c5883a822de11215136baf18c0761dcc64736f6c63430005110032")
	createResult, contractAddress, createLeftGas, createErr := mockCreate(contractCodeBytes, config)
	fmt.Printf("New create contract address:%s\n", contractAddress.GetHexString())
	fmt.Printf("New create contract createResult:%v,%d\n", createResult, len(createResult))
	fmt.Printf("New create contract costGas:%v,createErr:%v\n", config.GasLimit-createLeftGas, createErr)

	input := common.Hex2Bytes("0d56562c000000000000000000000000f89eebcc07e820f5a8330f52111fa51dd9dfb925")
	callResult, callLeftGas, callErr := mockCall(contractAddress, input, config)
	fmt.Printf("callResult:%v,costGas:%d,callErr:%v\n", callResult, config.GasLimit-callLeftGas, callErr)

	stateDB := config.State
	addr := common.HexToAddress("0xf89eebcc07e820f5a8330f52111fa51dd9dfb925")
	stateDB.SetBalance(addr, big.NewInt(5))

	input2 := common.Hex2Bytes("5b3357d2")
	callResult2, callLeftGas2, callErr2 := mockCall(contractAddress, input2, config)
	fmt.Printf("callResult:%v,costGas:%d,callErr:%v\n", callResult2, config.GasLimit-callLeftGas2, callErr2)

	input3 := common.Hex2Bytes("d4b6f21c")
	callResult3, callLeftGas3, callErr3 := mockCall(contractAddress, input3, config)
	fmt.Printf("callResult:%v,costGas:%d,callErr:%v\n", callResult3, config.GasLimit-callLeftGas3, callErr3)

}

func TestVM3(t *testing.T) {
	mockInit()
	config := new(testConfig)
	setDefaults(config)
	defer log.Close()

	config.GasLimit = 3000000
	config.GasPrice = big.NewInt(1)

	contractCodeBytes := common.Hex2Bytes("60806040526000805534801561001457600080fd5b50610393806100246000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80630d56562c146100675780632beaa90f146100ab5780635b3357d2146100c95780636271f50e146100e7578063c667a2f314610133578063d4b6f21c146101fc575b600080fd5b6100a96004803603602081101561007d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061021a565b005b6100b361025e565b6040518082815260200191505060405180910390f35b6100d1610267565b6040518082815260200191505060405180910390f35b610131600480360360808110156100fd57600080fd5b81019080803590602001909291908035906020019092919080359060200190929190803590602001909291905050506102a8565b005b6101e260048036036101c081101561014a57600080fd5b8101908080359060200190929190803590602001909291908035906020019092919080359060200190929190803590602001909291908035906020019092919080359060200190929190803590602001909291908035906020019092919080359060200190929190803590602001909291908035906020019092919080359060200190929190803590602001909291905050506102e1565b604051808215151515815260200191505060405180910390f35b61020461031d565b6040518082815260200191505060405180910390f35b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008054905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1631905090565b83600054016000819055508260005403600081905550816000540260008190555080600054816102d457fe5b0560008190555050505050565b60008b9c50899a508798508596508394508192508d8f1115610306576001905061030b565b600090505b9e9d5050505050505050505050505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163190509056fea265627a7a72315820c86eab4397d623e08f37b570d296bd75678ba8161e97d34122d738bb0e76dd3464736f6c63430005110032")
	createResult, contractAddress, createLeftGas, createErr := mockCreate(contractCodeBytes, config)
	fmt.Printf("New create contract address:%s\n", contractAddress.GetHexString())
	fmt.Printf("New create contract createResult:%v,%d\n", createResult, len(createResult))
	fmt.Printf("New create contract costGas:%v,createErr:%v\n", config.GasLimit-createLeftGas, createErr)

	input := common.Hex2Bytes("c667a2f3000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000050000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000700000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000009000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000b000000000000000000000000000000000000000000000000000000000000000c000000000000000000000000000000000000000000000000000000000000000d000000000000000000000000000000000000000000000000000000000000000e")
	callResult, callLeftGas, callErr := mockCall(contractAddress, input, config)
	fmt.Printf("callResult:%v,costGas:%d,callErr:%v\n", callResult, config.GasLimit-callLeftGas, callErr)
}

func TestVM4(t *testing.T) {
	mockInit()
	config := new(testConfig)
	setDefaults(config)
	defer log.Close()

	config.GasLimit = 3000000
	config.GasPrice = big.NewInt(1)

	contractCodeBytes := common.Hex2Bytes("6080604052735c602ec7b8de713d6106da7d1db1fd7bfcc2d4d46000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503480156200006557600080fd5b5060405162001c9938038062001c9983398181016040526200008b9190810190620000f2565b600060028190555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506200016c565b600081519050620000ec8162000152565b92915050565b6000602082840312156200010557600080fd5b60006200011584828501620000db565b91505092915050565b60006200012b8262000132565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6200015d816200011e565b81146200016957600080fd5b50565b611b1d806200017c6000396000f3fe6080604052600436106100555760003560e01c8063046b290814610057578063999635a11461006e578063ad88be6e14610097578063b2b57a26146100c0578063da68b4b4146100e9578063eb185c50146100f3575b005b34801561006357600080fd5b5061006c61010f565b005b34801561007a57600080fd5b5061009560048036036100909190810190611327565b61014a565b005b3480156100a357600080fd5b506100be60048036036100b9919081019061123e565b610369565b005b3480156100cc57600080fd5b506100e760048036036100e29190810190611327565b61055c565b005b6100f161074e565b005b61010d600480360361010891908101906111fd565b610796565b005b7f8a75e65e6a8c5a0bc5c906bb7fc1f38cdbdfc0adc92e41b43b3ce83463a8a8c06002546040516101409190611754565b60405180910390a1565b846001600254011461015b57600080fd5b600084511161016957600080fd5b835183511461017757600080fd5b835182511461018557600080fd5b606060008090505b85518110156101c85760606101b5838884815181106101a857fe5b60200260200101516107e1565b905080925050808060010191505061018d565b506060868286866040516020016101e2949392919061160d565b6040516020818303038152906040529050600081805190602001209050610209818561092a565b61021557505050610362565b60008090505b87518110156103125786818151811061023057fe5b602002602001015173ffffffffffffffffffffffffffffffffffffffff166108fc87838151811061025d57fe5b60200260200101519081150290604051600060405180830381858888f19350505050158015610290573d6000803e3d6000fd5b507fe04d47d3054af1f047151ee17798cebe92f604635034315e4fcab7b2d7a66ef98882815181106102be57fe5b60200260200101518883815181106102d257fe5b60200260200101518884815181106102e657fe5b60200260200101516040516102fd93929190611716565b60405180910390a1808060010191505061021b565b506002600081548092919060010191905055507f8a75e65e6a8c5a0bc5c906bb7fc1f38cdbdfc0adc92e41b43b3ce83463a8a8c06002546040516103569190611754565b60405180910390a15050505b5050505050565b856001600254011461037a57600080fd5b600084511161038857600080fd5b835183511461039657600080fd5b83518251146103a457600080fd5b606060008090505b85518110156103e75760606103d4838884815181106103c757fe5b60200260200101516107e1565b90508092505080806001019150506103ac565b50606087828686604051602001610401949392919061160d565b6040516020818303038152906040529050600081805190602001209050610428818561092a565b61043457505050610554565b60008090505b8751811015610504578873ffffffffffffffffffffffffffffffffffffffff1663a9059cbb88838151811061046b57fe5b602002602001015188848151811061047f57fe5b60200260200101516040518363ffffffff1660e01b81526004016104a492919061166a565b602060405180830381600087803b1580156104be57600080fd5b505af11580156104d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506104f691908101906111d4565b50808060010191505061043a565b506002600081548092919060010191905055507f8a75e65e6a8c5a0bc5c906bb7fc1f38cdbdfc0adc92e41b43b3ce83463a8a8c06002546040516105489190611754565b60405180910390a15050505b505050505050565b846001600254011461056d57600080fd5b600084511161057b57600080fd5b835183511461058957600080fd5b835182511461059757600080fd5b606060008090505b85518110156105da5760606105c7838884815181106105ba57fe5b60200260200101516107e1565b905080925050808060010191505061059f565b506060868286866040516020016105f4949392919061160d565b604051602081830303815290604052905060008180519060200120905061061b818561092a565b61062757505050610747565b60008090505b87518110156106f7576000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb88838151811061067f57fe5b602002602001015188848151811061069357fe5b60200260200101516040518363ffffffff1660e01b81526004016106b892919061166a565b600060405180830381600087803b1580156106d257600080fd5b505af11580156106e6573d6000803e3d6000fd5b50505050808060010191505061062d565b506002600081548092919060010191905055507f8a75e65e6a8c5a0bc5c906bb7fc1f38cdbdfc0adc92e41b43b3ce83463a8a8c060025460405161073b9190611754565b60405180910390a15050505b5050505050565b6000341161075b57600080fd5b7fb61b60bb8d6b946262c1546b50b6e216393eb147c9d267ea7d123d9aafd5483a333460405161078c92919061166a565b60405180910390a1565b600034116107a357600080fd5b7f6cf43ed1a9dd396df89c54be8a0dacaf939f1afdc5dc17a37974d01665ad2d478133346040516107d6939291906116d8565b60405180910390a150565b6060808390506060839050606081518351016040519080825280601f01601f1916602001820160405280156108255781602001600182028038833980820191505090505b5090506060819050600080905060008090505b85518110156108a65785818151811061084d57fe5b602001015160f81c60f81b83838060010194508151811061086a57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050610838565b5060008090505b845181101561091b578481815181106108c257fe5b602001015160f81c60f81b8383806001019450815181106108df57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535080806001019150506108ad565b50829550505050505092915050565b6000610934610da0565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166309a9d76c6040518163ffffffff1660e01b815260040160606040518083038186803b15801561099c57600080fd5b505afa1580156109b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052506109d491908101906111ab565b90507fe821288434e942492293d0b381bb8e705c32fa88ff6a7978ea1a399fde4a7e6d81600060038110610a0457fe5b6020020151604051610a16919061164f565b60405180910390a16000809050610a2b610dc2565b60008090505b8551811015610b45576000610a5988888481518110610a4c57fe5b6020026020010151610b68565b9050600080905060008090505b83811015610ac8578273ffffffffffffffffffffffffffffffffffffffff16858260048110610a9157fe5b602002015173ffffffffffffffffffffffffffffffffffffffff161415610abb5760019150610ac8565b8080600101915050610a66565b506001811415610ad9575050610b38565b81848460048110610ae657fe5b602002019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050610b278683610bd9565b15610b355784806001019550505b50505b8080600101915050610a31565b5060028210610b5a5760019350505050610b62565b600093505050505b92915050565b600080610b80610b7b8460006020610c51565b610d05565b90506000610b98610b9385602080610c51565b610d05565b90506000610ba98560406001610c51565b600081518110610bb557fe5b602001015160f81c60f81b9050610bce86848484610d13565b935050505092915050565b600080600090505b6004811015610c45578273ffffffffffffffffffffffffffffffffffffffff16848260038110610c0d57fe5b602002015173ffffffffffffffffffffffffffffffffffffffff161415610c38576001915050610c4b565b8080600101915050610be1565b50600090505b92915050565b606080826040519080825280601f01601f191660200182016040528015610c875781602001600182028038833980820191505090505b50905060008090505b83811015610cf9578585820181518110610ca657fe5b602001015160f81c60f81b828281518110610cbd57fe5b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508080600101915050610c90565b50809150509392505050565b600060208201519050919050565b6000808260f81c905060008360f81c60ff161480610d37575060018360f81c60ff16145b15610d4657601b8360f81c0190505b60018682878760405160008152602001604052604051610d699493929190611693565b6020604051602081039080840390855afa158015610d8b573d6000803e3d6000fd5b50505060206040510351915050949350505050565b6040518060600160405280600390602082028038833980820191505090505090565b6040518060800160405280600490602082028038833980820191505090505090565b600081359050610df381611a7e565b92915050565b600081519050610e0881611a7e565b92915050565b600081359050610e1d81611a95565b92915050565b600082601f830112610e3457600080fd5b6003610e47610e428261179c565b61176f565b91508183856020840282011115610e5d57600080fd5b60005b83811015610e8d5781610e738882610df9565b845260208401935060208301925050600181019050610e60565b5050505092915050565b600082601f830112610ea857600080fd5b8135610ebb610eb6826117be565b61176f565b91508181835260208401935060208101905083856020840282011115610ee057600080fd5b60005b83811015610f105781610ef68882610e0e565b845260208401935060208301925050600181019050610ee3565b5050505092915050565b600082601f830112610f2b57600080fd5b8135610f3e610f39826117e6565b61176f565b9150818183526020840193506020810190508360005b83811015610f845781358601610f6a888261109a565b845260208401935060208301925050600181019050610f54565b5050505092915050565b600082601f830112610f9f57600080fd5b8135610fb2610fad8261180e565b61176f565b9150818183526020840193506020810190508360005b83811015610ff85781358601610fde88826110ee565b845260208401935060208301925050600181019050610fc8565b5050505092915050565b600082601f83011261101357600080fd5b813561102661102182611836565b61176f565b9150818183526020840193506020810190508385602084028201111561104b57600080fd5b60005b8381101561107b57816110618882611196565b84526020840193506020830192505060018101905061104e565b5050505092915050565b60008151905061109481611aac565b92915050565b600082601f8301126110ab57600080fd5b81356110be6110b98261185e565b61176f565b915080825260208301602083018583830111156110da57600080fd5b6110e5838284611a21565b50505092915050565b600082601f8301126110ff57600080fd5b813561111261110d8261188a565b61176f565b9150808252602083016020830185838301111561112e57600080fd5b611139838284611a21565b50505092915050565b600082601f83011261115357600080fd5b8135611166611161826118b6565b61176f565b9150808252602083016020830185838301111561118257600080fd5b61118d838284611a21565b50505092915050565b6000813590506111a581611ac3565b92915050565b6000606082840312156111bd57600080fd5b60006111cb84828501610e23565b91505092915050565b6000602082840312156111e657600080fd5b60006111f484828501611085565b91505092915050565b60006020828403121561120f57600080fd5b600082013567ffffffffffffffff81111561122957600080fd5b61123584828501611142565b91505092915050565b60008060008060008060c0878903121561125757600080fd5b600061126589828a01611196565b965050602061127689828a01610de4565b955050604087013567ffffffffffffffff81111561129357600080fd5b61129f89828a01610f8e565b945050606087013567ffffffffffffffff8111156112bc57600080fd5b6112c889828a01610e97565b935050608087013567ffffffffffffffff8111156112e557600080fd5b6112f189828a01611002565b92505060a087013567ffffffffffffffff81111561130e57600080fd5b61131a89828a01610f1a565b9150509295509295509295565b600080600080600060a0868803121561133f57600080fd5b600061134d88828901611196565b955050602086013567ffffffffffffffff81111561136a57600080fd5b61137688828901610f8e565b945050604086013567ffffffffffffffff81111561139357600080fd5b61139f88828901610e97565b935050606086013567ffffffffffffffff8111156113bc57600080fd5b6113c888828901611002565b925050608086013567ffffffffffffffff8111156113e557600080fd5b6113f188828901610f1a565b9150509295509295909350565b600061140a838361143d565b60208301905092915050565b600061142283836115d8565b60208301905092915050565b611437816119eb565b82525050565b6114468161198c565b82525050565b6114558161197a565b82525050565b600061146682611902565b6114708185611948565b935061147b836118e2565b8060005b838110156114ac57815161149388826113fe565b975061149e8361192e565b92505060018101905061147f565b5085935050505092915050565b60006114c48261190d565b6114ce8185611953565b93506114d9836118f2565b8060005b8381101561150a5781516114f18882611416565b97506114fc8361193b565b9250506001810190506114dd565b5085935050505092915050565b611520816119aa565b82525050565b600061153182611923565b61153b818561195e565b935061154b818560208601611a30565b61155481611a6d565b840191505092915050565b600061156a82611923565b611574818561196f565b9350611584818560208601611a30565b80840191505092915050565b600061159b82611918565b6115a5818561195e565b93506115b5818560208601611a30565b6115be81611a6d565b840191505092915050565b6115d2816119d4565b82525050565b6115e1816119d4565b82525050565b6115f86115f3826119d4565b611a63565b82525050565b611607816119de565b82525050565b600061161982876115e7565b602082019150611629828661155f565b9150611635828561145b565b915061164182846114b9565b915081905095945050505050565b6000602082019050611664600083018461144c565b92915050565b600060408201905061167f600083018561142e565b61168c60208301846115c9565b9392505050565b60006080820190506116a86000830187611517565b6116b560208301866115fe565b6116c26040830185611517565b6116cf6060830184611517565b95945050505050565b600060608201905081810360008301526116f28186611526565b9050611701602083018561142e565b61170e60408301846115c9565b949350505050565b600060608201905081810360008301526117308186611590565b905061173f602083018561142e565b61174c60408301846115c9565b949350505050565b600060208201905061176960008301846115c9565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561179257600080fd5b8060405250919050565b600067ffffffffffffffff8211156117b357600080fd5b602082029050919050565b600067ffffffffffffffff8211156117d557600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156117fd57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561182557600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561184d57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561187557600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff8211156118a157600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff8211156118cd57600080fd5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600081905092915050565b600081905092915050565b600082825260208201905092915050565b600081905092915050565b6000611985826119b4565b9050919050565b6000611997826119b4565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60006119f6826119fd565b9050919050565b6000611a0882611a0f565b9050919050565b6000611a1a826119b4565b9050919050565b82818337600083830152505050565b60005b83811015611a4e578082015181840152602081019050611a33565b83811115611a5d576000848401525b50505050565b6000819050919050565b6000601f19601f8301169050919050565b611a878161197a565b8114611a9257600080fd5b50565b611a9e8161198c565b8114611aa957600080fd5b50565b611ab58161199e565b8114611ac057600080fd5b50565b611acc816119d4565b8114611ad757600080fd5b5056fea365627a7a723158207a4a6d7944acd950c4876c6760d5b0fe976a7e962ad8d98f66f589a2afa5eb806c6578706572696d656e74616cf564736f6c63430005110040000000000000000000000000253D2C464d6c0bF52e7ea5E798B87912d99303bd")
	createResult, contractAddress, createLeftGas, createErr := mockCreate(contractCodeBytes, config)
	fmt.Printf("New create contract address:%s\n", contractAddress.GetHexString())
	fmt.Printf("New create contract createResult:%v,%d\n", createResult, len(createResult))
	fmt.Printf("New create contract costGas:%v,createErr:%v\n", config.GasLimit-createLeftGas, createErr)
	//-------------------CALL 1----------------
	input := common.Hex2Bytes("da68b4b4")

	stateDB := config.State
	addr := common.HexToAddress("0x0f656deb14f9666d3fdf9dff7c1c430c0570223f10900c89c94a79324ad24085")
	stateDB.SetBalance(addr, big.NewInt(5))

	config.Value = big.NewInt(1)
	config.Origin = addr
	callResult, callLeftGas, callErr := mockCall(contractAddress, input, config)
	fmt.Printf("callResult:%v,costGas:%d,callErr:%v\n", callResult, config.GasLimit-callLeftGas, callErr)
	//-------CALL 2 ---------------------
	input2 := common.Hex2Bytes("eb185c50000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000056162636465000000000000000000000000000000000000000000000000000000")

	addr = common.HexToAddress("0x0f656deb14f9666d3fdf9dff7c1c430c0570223f10900c89c94a79324ad24084")
	stateDB.SetBalance(addr, big.NewInt(5))

	config.Value = big.NewInt(2)
	config.Origin = addr
	callResult2, callLeftGas2, callErr2 := mockCall(contractAddress, input2, config)
	fmt.Printf("callResult:%v,costGas:%d,callErr:%v\n", callResult2, config.GasLimit-callLeftGas2, callErr2)
}

func TestVM5(t *testing.T) {
	mockInit()
	config := new(testConfig)
	setDefaults(config)
	defer log.Close()

	config.GasLimit = 3000000
	config.GasPrice = big.NewInt(1)

	contractCodeBytes := common.Hex2Bytes("608060405234801561001057600080fd5b50610223806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80639db8d7d514610030575b600080fd5b61005c6004803603602081101561004657600080fd5b810190808035906020019092919050505061005e565b005b60606040518060200161007090610106565b6020820181038252601f19601f820116604052509050600081518381602085016000f59150507fb03c53b28e78a88e31607a27e1fa48234dce28d5d9d9ec7b295aeb02e674a1e18184604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019250505060405180910390a1505050565b60e5806101138339019056fe6080604052736a47c06bcfabc079e4c3b196a47f3b5a2fa998b96000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073ead5853f4d54d0718c568a589f0087c5eb385645600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060025534801560bd57600080fd5b50600160025401600281905550600073ffffffffffffffffffffffffffffffffffffffff16fffea165627a7a72305820819896a9eac1488592d8328ef846692c4cb6c760d247250e56013d5ca20d6e760029")
	createResult, contractAddress, createLeftGas, createErr := mockCreate(contractCodeBytes, config)
	fmt.Printf("New create contract address:%s\n", contractAddress.GetHexString())
	fmt.Printf("New create contract createResult:%v,%d\n", createResult, len(createResult))
	fmt.Printf("New create contract costGas:%v,createErr:%v\n", config.GasLimit-createLeftGas, createErr)

	input := common.Hex2Bytes("9db8d7d50000000000000000000000000000000000000000000000000000000000000001")
	callResult, callLeftGas, callErr := mockCall(contractAddress, input, config)
	fmt.Printf("callResult:%v,costGas:%d,callErr:%v\n", callResult, config.GasLimit-callLeftGas, callErr)
}

func TestCreate2Address(t *testing.T) {
	salt := uint256.NewInt()
	salt.SetUint64(1)

	addr := common.HexToAddress("0x616fe1518d70c3d3a4d10c89005f29db05979b31000000000000000000000000")

	code := common.Hex2Bytes("6080604052736a47c06bcfabc079e4c3b196a47f3b5a2fa998b96000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555073ead5853f4d54d0718c568a589f0087c5eb385645600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600060025534801560bd57600080fd5b50600160025401600281905550600073ffffffffffffffffffffffffffffffffffffffff16fffe")
	codeAndHash := &codeAndHash{code: code}

	fmt.Printf("code:%v\n", codeAndHash.Hash().Bytes())
	fmt.Printf("addr:%v\n", addr.Bytes())
	fmt.Printf("salt:%v\n", salt.Bytes32())
	contractAddr := crypto.CreateAddress2(addr, common.Hash(salt.Bytes32()), codeAndHash.Hash().Bytes())
	fmt.Printf("create2 contract addr:%v", contractAddr.Bytes())
}

func TestVM6(t *testing.T) {
	mockInit()
	config := new(testConfig)
	setDefaults(config)
	defer log.Close()

	config.GasLimit = 3000000
	config.GasPrice = big.NewInt(1)

	contractCodeBytes := common.Hex2Bytes("6080604052348015600f57600080fd5b506103ac8061001f6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063f8a8fd6d14610030575b600080fd5b610038610052565b604051808215151515815260200191505060405180910390f35b600080600360050690507f3a406d3871dab9676f7dbfa824f81f599698603527e1521006603c9118171e18816040518082815260200191505060405180910390a16000600460050790507f3a406d3871dab9676f7dbfa824f81f599698603527e1521006603c9118171e18816040518082815260200191505060405180910390a1600081831390507f3a406d3871dab9676f7dbfa824f81f599698603527e1521006603c9118171e18816040518082815260200191505060405180910390a160008060011890507f3a406d3871dab9676f7dbfa824f81f599698603527e1521006603c9118171e18816040518082815260200191505060405180910390a160003090507fe821288434e942492293d0b381bb8e705c32fa88ff6a7978ea1a399fde4a7e6d81604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a160003290507f3a406d3871dab9676f7dbfa824f81f599698603527e1521006603c9118171e18816040518082815260200191505060405180910390a160003a90507f3a406d3871dab9676f7dbfa824f81f599698603527e1521006603c9118171e18816040518082815260200191505060405180910390a16000600140905060004190507f3a406d3871dab9676f7dbfa824f81f599698603527e1521006603c9118171e18816040518082815260200191505060405180910390a160004390507f3a406d3871dab9676f7dbfa824f81f599698603527e1521006603c9118171e18816040518082815260200191505060405180910390a160004290507f3a406d3871dab9676f7dbfa824f81f599698603527e1521006603c9118171e18816040518082815260200191505060405180910390a160004490507f3a406d3871dab9676f7dbfa824f81f599698603527e1521006603c9118171e18816040518082815260200191505060405180910390a160004590507f3a406d3871dab9676f7dbfa824f81f599698603527e1521006603c9118171e18816040518082815260200191505060405180910390a160019d50505050505050505050505050509056fea265627a7a723158208f072ad16ca9bcf60e7483559e58f66b1dd625c0eb10201e3846e1c9dbdd62e064736f6c63430005110032")
	createResult, contractAddress, createLeftGas, createErr := mockCreate(contractCodeBytes, config)
	fmt.Printf("New create contract address:%s\n", contractAddress.GetHexString())
	fmt.Printf("New create contract createResult:%v,%d\n", createResult, len(createResult))
	fmt.Printf("New create contract costGas:%v,createErr:%v\n", config.GasLimit-createLeftGas, createErr)

	input := common.Hex2Bytes("f8a8fd6d")
	callResult, callLeftGas, callErr := mockCall(contractAddress, input, config)
	fmt.Printf("callResult:%v,costGas:%d,callErr:%v\n", callResult, config.GasLimit-callLeftGas, callErr)
}

func TestVM7(t *testing.T) {
	mockInit()
	config := new(testConfig)
	setDefaults(config)
	defer log.Close()

	config.GasLimit = 3000000
	config.GasPrice = big.NewInt(1)

	contractCodeBytes := common.Hex2Bytes("")
	createResult, contractAddress, createLeftGas, createErr := mockCreate(contractCodeBytes, config)
	fmt.Printf("New create contract address:%s\n", contractAddress.GetHexString())
	fmt.Printf("New create contract createResult:%v,%d\n", createResult, len(createResult))
	fmt.Printf("New create contract costGas:%v,createErr:%v\n", config.GasLimit-createLeftGas, createErr)
}
